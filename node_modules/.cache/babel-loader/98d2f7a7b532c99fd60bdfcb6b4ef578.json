{"ast":null,"code":"import _slicedToArray from\"/Users/ankitadixit/Documents/watcher-api-access-rights/watcher-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{Redirect}from'react-router';import{MDBContainer,MDBRow}from\"mdbreact\";import\"./style.css\";import{fetchData}from'../../services/apiConfig';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export var AccountsSelector=function AccountsSelector(props){var _useState=useState([props.Account]),_useState2=_slicedToArray(_useState,2),AccountList=_useState2[0],setAccountList=_useState2[1];var accountList=new Array();useEffect(function(){fetchData('accounts','GET').then(function(res){console.log(res);for(var key in res){console.log(props.Account);console.log(res[key]);accountList.push(res[key]);}setAccountList(accountList);});},[]);var AccountT=function AccountT(e){console.log(e.target.value);var newAccount=e.target.value;props.AccountToggle(newAccount);};console.log(AccountList);console.log(props.Account);var token=localStorage.getItem(\"token\");console.log(\"accountSelector\");if(token===null||token===undefined||token.length<0){return/*#__PURE__*/_jsx(Redirect,{to:{pathname:'/login'}});}return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(MDBContainer,{fluid:true,style:{paddingTop:\"2vw\",paddingLeft:\"2vw\"},children:/*#__PURE__*/_jsx(MDBRow,{children:/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"select\",{className:\"custom-select\",style:{width:\"250px\"},onChange:function onChange(e){return AccountT(e);},value:props.aAcount,children:AccountList.map(function(account){return/*#__PURE__*/_jsx(\"option\",{value:account,children:account});})})})})})});};","map":{"version":3,"sources":["/Users/ankitadixit/Documents/watcher-api-access-rights/watcher-ui/src/components/dashboard/AccountsSelector.tsx"],"names":["React","useState","useEffect","Redirect","MDBContainer","MDBRow","fetchData","AccountsSelector","props","Account","AccountList","setAccountList","accountList","Array","then","res","console","log","key","push","AccountT","e","target","value","newAccount","AccountToggle","token","localStorage","getItem","undefined","length","pathname","paddingTop","paddingLeft","width","aAcount","map","account"],"mappings":"wLAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,QAAT,KAAyB,cAAzB,CAEA,OAQIC,YARJ,CAYIC,MAZJ,KAuBO,UAvBP,CA0BA,MAAO,aAAP,CAEA,OAASC,SAAT,KAA0B,0BAA1B,C,gGACA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,CAAgB,eACNP,QAAQ,CAAC,CAACO,KAAK,CAACC,OAAP,CAAD,CADF,wCACrCC,WADqC,eACxBC,cADwB,eAE5C,GAAMC,CAAAA,WAAgB,CAAG,GAAIC,CAAAA,KAAJ,EAAzB,CACAX,SAAS,CAAC,UAAM,CACZI,SAAS,CAAC,UAAD,CAAa,KAAb,CAAT,CAA6BQ,IAA7B,CAAkC,SAACC,GAAD,CAAc,CAC5CC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACA,IAAI,GAAIG,CAAAA,GAAR,GAAeH,CAAAA,GAAf,CAAmB,CACfC,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACC,OAAlB,EACAO,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,GAAD,CAAf,EACAN,WAAW,CAACO,IAAZ,CAAiBJ,GAAG,CAACG,GAAD,CAApB,EACH,CACDP,cAAc,CAACC,WAAD,CAAd,CACH,CARD,EASH,CAVQ,CAUN,EAVM,CAAT,CAYA,GAAMQ,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,CAAD,CAAY,CACzBL,OAAO,CAACC,GAAR,CAAYI,CAAC,CAACC,MAAF,CAASC,KAArB,EACA,GAAMC,CAAAA,UAAU,CAAGH,CAAC,CAACC,MAAF,CAASC,KAA5B,CACAf,KAAK,CAACiB,aAAN,CAAoBD,UAApB,EACH,CAJD,CAKAR,OAAO,CAACC,GAAR,CAAYP,WAAZ,EACAM,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACC,OAAlB,EACA,GAAMiB,CAAAA,KAAK,CAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CACAZ,OAAO,CAACC,GAAR,CAAY,iBAAZ,EACA,GAAIS,KAAK,GAAK,IAAV,EAAkBA,KAAK,GAAKG,SAA5B,EAAyCH,KAAK,CAACI,MAAN,CAAe,CAA5D,CAA+D,CAC3D,mBAAO,KAAC,QAAD,EAAU,EAAE,CAAE,CACjBC,QAAQ,CAAE,QADO,CAAd,EAAP,CAGH,CACD,mBACI,sCACI,KAAC,YAAD,EAAc,KAAK,KAAnB,CAAoB,KAAK,CAAE,CAAEC,UAAU,CAAE,KAAd,CAAqBC,WAAW,CAAE,KAAlC,CAA3B,uBACI,KAAC,MAAD,wBACI,kCACI,eAAQ,SAAS,CAAC,eAAlB,CAAkC,KAAK,CAAE,CAAEC,KAAK,CAAE,OAAT,CAAzC,CAA6D,QAAQ,CAAE,kBAACb,CAAD,QAAYD,CAAAA,QAAQ,CAACC,CAAD,CAApB,EAAvE,CAAgG,KAAK,CAAEb,KAAK,CAAC2B,OAA7G,UACIzB,WAAW,CAAC0B,GAAZ,CAAgB,SAACC,OAAD,CAAkB,CAC9B,mBAAO,eAAQ,KAAK,CAAEA,OAAf,UAAyBA,OAAzB,EAAP,CACJ,CAFA,CADJ,EADJ,EADJ,EADJ,EADJ,EADJ,CAeH,CA5CM","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Redirect } from 'react-router';\nimport { Header } from \"../../common/Header\";\nimport {\n    MDBBtn,\n    MDBFreeBird,\n    MDBCard,\n    MDBCardBody,\n    MDBCardImage,\n    MDBCardText,\n    MDBCol,\n    MDBContainer,\n    MDBFormInline,\n    MDBIcon,\n    MDBInput,\n    MDBRow,\n    MDBTable,\n    MDBTableBody,\n    MDBTableHead,\n    MDBEdgeHeader,\n    MDBCardTitle,\n    MDBProgress,\n    MDBListGroup,\n    MDBListGroupItem,\n    MDBBreadcrumb,\n    MDBBreadcrumbItem\n} from \"mdbreact\";\nimport { useHistory } from \"react-router\";\nimport { Chart } from \"react-google-charts\";\nimport \"./style.css\";\nimport domain from '../../assets/images/domain.png'\nimport { fetchData } from '../../services/apiConfig'\nexport const AccountsSelector = (props: any) => {\n    const [AccountList, setAccountList] = useState([props.Account]);\n    const accountList: any = new Array();\n    useEffect(() => {\n        fetchData('accounts', 'GET').then((res: any) => {\n            console.log(res)\n            for(let key in res){\n                console.log(props.Account)\n                console.log(res[key]);\n                accountList.push(res[key]);\n            }\n            setAccountList(accountList)\n        })\n    }, []);\n    \n    const AccountT = (e: any) => {\n        console.log(e.target.value)\n        const newAccount = e.target.value;\n        props.AccountToggle(newAccount);\n    }\n    console.log(AccountList)\n    console.log(props.Account)\n    const token = localStorage.getItem(\"token\");\n    console.log(\"accountSelector\")\n    if (token === null || token === undefined || token.length < 0) {\n        return <Redirect to={{\n            pathname: '/login',\n        }} />\n    }\n    return (\n        <>\n            <MDBContainer fluid style={{ paddingTop: \"2vw\", paddingLeft: \"2vw\" }}>\n                <MDBRow>\n                    <div>\n                        <select className=\"custom-select\" style={{ width: \"250px\" }} onChange={(e: any) => AccountT(e)} value={props.aAcount}>\n                           {AccountList.map((account: any) => {\n                                return <option value={account}>{account}</option>\n                           })}\n                        </select>\n                    </div>\n                </MDBRow>\n            </MDBContainer>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}