{"ast":null,"code":"var _jsxFileName = \"/Users/ankitadixit/Documents/watcher-ui/src/components/dashboard/AccountsSelector.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Redirect } from 'react-router';\nimport { MDBContainer, MDBRow } from \"mdbreact\";\nimport \"./style.css\";\nimport { fetchData } from '../../services/apiConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AccountsSelector = props => {\n  _s();\n\n  const [AccountList, setAccountList] = useState([props.Account]);\n  const accountList = new Array();\n  useEffect(() => {\n    fetchData('accounts', 'GET').then(res => {\n      console.log(res);\n\n      for (let key in res) {\n        if (res[key] !== props.Account) {\n          console.log(props.Account);\n          console.log(res[key]);\n          accountList.push(res[key]);\n        }\n      }\n\n      setAccountList(accountList);\n    });\n  }, []);\n  useEffect(() => {\n    if (accountList.includes(props.Account)) {\n      console.log(\"true\");\n    }\n\n    console.log(accountList);\n    console.log(props.Account);\n    console.log(\"new props\");\n  }, [props.Account]);\n\n  const AccountT = e => {\n    console.log(e.target.value);\n    const newAccount = e.target.value;\n    props.AccountToggle(newAccount);\n  };\n\n  console.log(AccountList);\n  console.log(props.account);\n  const token = localStorage.getItem(\"token\");\n  console.log(\"accountSelector\");\n\n  if (token === null || token === undefined || token.length < 0) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: '/login'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MDBContainer, {\n      fluid: true,\n      style: {\n        paddingTop: \"2vw\",\n        paddingLeft: \"2vw\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MDBRow, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"custom-select\",\n            style: {\n              width: \"250px\"\n            },\n            onChange: e => AccountT(e),\n            value: props.account,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"0\",\n              children: props.Account\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 28\n            }, this), AccountList.map(account => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: account,\n                children: account\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 40\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(AccountsSelector, \"zMI+PyeCVhrLmsRRGtUJZSnZAAQ=\");\n\n_c = AccountsSelector;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountsSelector\");","map":{"version":3,"sources":["/Users/ankitadixit/Documents/watcher-ui/src/components/dashboard/AccountsSelector.tsx"],"names":["React","useState","useEffect","Redirect","MDBContainer","MDBRow","fetchData","AccountsSelector","props","AccountList","setAccountList","Account","accountList","Array","then","res","console","log","key","push","includes","AccountT","e","target","value","newAccount","AccountToggle","account","token","localStorage","getItem","undefined","length","pathname","paddingTop","paddingLeft","width","map"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { Redirect } from 'react-router';\nimport { Header } from \"../../common/Header\";\nimport {\n    MDBBtn,\n    MDBFreeBird,\n    MDBCard,\n    MDBCardBody,\n    MDBCardImage,\n    MDBCardText,\n    MDBCol,\n    MDBContainer,\n    MDBFormInline,\n    MDBIcon,\n    MDBInput,\n    MDBRow,\n    MDBTable,\n    MDBTableBody,\n    MDBTableHead,\n    MDBEdgeHeader,\n    MDBCardTitle,\n    MDBProgress,\n    MDBListGroup,\n    MDBListGroupItem,\n    MDBBreadcrumb,\n    MDBBreadcrumbItem\n} from \"mdbreact\";\nimport { useHistory } from \"react-router\";\nimport { Chart } from \"react-google-charts\";\nimport \"./style.css\";\nimport domain from '../../assets/images/domain.png'\nimport { fetchData } from '../../services/apiConfig'\nexport const AccountsSelector = (props: any) => {\n    const [AccountList, setAccountList] = useState([props.Account]);\n    const accountList: any = new Array();\n    useEffect(() => {\n        fetchData('accounts', 'GET').then((res: any) => {\n            console.log(res)\n            for(let key in res){\n               if(res[key] !== props.Account){\n                console.log(props.Account)\n                console.log(res[key]);\n                accountList.push(res[key]);\n               }\n            }\n            setAccountList(accountList)\n        })\n    }, []);\n    useEffect(() => {\n            if (accountList.includes(props.Account)){\n                console.log(\"true\")\n            }\n            console.log(accountList)\n            console.log(props.Account)\n           console.log(\"new props\")\n      \n    }, [props.Account]);\n    const AccountT = (e: any) => {\n        console.log(e.target.value)\n        const newAccount = e.target.value;\n        props.AccountToggle(newAccount);\n    }\n    console.log(AccountList)\n    console.log(props.account)\n    const token = localStorage.getItem(\"token\");\n    console.log(\"accountSelector\")\n    if (token === null || token === undefined || token.length < 0) {\n        return <Redirect to={{\n            pathname: '/login',\n        }} />\n    }\n    return (\n        <>\n            <MDBContainer fluid style={{ paddingTop: \"2vw\", paddingLeft: \"2vw\" }}>\n                <MDBRow>\n                    <div>\n                        <select className=\"custom-select\" style={{ width: \"250px\" }} onChange={(e: any) => AccountT(e)} value={props.account}>\n                           <option value=\"0\" >{props.Account}</option>\n                           {AccountList.map((account: any) => {\n                                return <option value={account}>{account}</option>\n                           })}\n                        </select>\n                    </div>\n                </MDBRow>\n            </MDBContainer>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}